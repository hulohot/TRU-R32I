$date
	Wed Feb 12 14:46:57 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module riscv_core_tb $end
$var wire 32 ! debug_pc [31:0] $end
$var wire 32 " debug_instr [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ rst_n $end
$scope module dut $end
$var wire 1 # clk $end
$var wire 1 $ rst_n $end
$var wire 32 % imem_data [31:0] $end
$var wire 32 & imem_addr [31:0] $end
$var wire 1 ' dmem_we $end
$var wire 32 ( dmem_wdata [31:0] $end
$var wire 2 ) dmem_size [1:0] $end
$var wire 32 * dmem_rdata [31:0] $end
$var wire 4 + dmem_be [3:0] $end
$var wire 32 , dmem_addr [31:0] $end
$var wire 32 - debug_pc [31:0] $end
$var wire 32 . debug_instr [31:0] $end
$var parameter 32 / DMEM_DEPTH $end
$var parameter 8 0 DMEM_INIT_FILE $end
$var parameter 32 1 IMEM_DEPTH $end
$var parameter 200 2 IMEM_INIT_FILE $end
$scope module cpu $end
$var wire 32 3 alu_a [31:0] $end
$var wire 1 # clk $end
$var wire 32 4 debug_instr [31:0] $end
$var wire 32 5 debug_pc [31:0] $end
$var wire 1 6 dmem_addr_valid $end
$var wire 2 7 dmem_size [1:0] $end
$var wire 32 8 dmem_wdata [31:0] $end
$var wire 1 ' dmem_we $end
$var wire 32 9 imem_addr [31:0] $end
$var wire 32 : instruction [31:0] $end
$var wire 1 $ rst_n $end
$var wire 1 ; stall $end
$var wire 1 < unused_overflow $end
$var wire 1 = unused_mem_read $end
$var wire 7 > unused_funct7 [6:0] $end
$var wire 32 ? rs2_data [31:0] $end
$var wire 5 @ rs2 [4:0] $end
$var wire 32 A rs1_data [31:0] $end
$var wire 5 B rs1 [4:0] $end
$var wire 2 C result_src [1:0] $end
$var wire 1 D reg_write $end
$var wire 5 E rd [4:0] $end
$var wire 32 F pc_plus4 [31:0] $end
$var wire 32 G pc_current [31:0] $end
$var wire 7 H opcode [6:0] $end
$var wire 1 I mem_write $end
$var wire 2 J mem_size [1:0] $end
$var wire 1 K jump $end
$var wire 32 L imm_u_type [31:0] $end
$var wire 32 M imm_s_type [31:0] $end
$var wire 32 N imm_j_type [31:0] $end
$var wire 32 O imm_i_type [31:0] $end
$var wire 32 P imm_b_type [31:0] $end
$var wire 32 Q imem_data [31:0] $end
$var wire 3 R funct3 [2:0] $end
$var wire 32 S dmem_rdata [31:0] $end
$var wire 32 T dmem_addr_offset [31:0] $end
$var wire 32 U dmem_addr [31:0] $end
$var wire 1 V branch $end
$var wire 1 W alu_zero $end
$var wire 1 X alu_src $end
$var wire 32 Y alu_result [31:0] $end
$var wire 4 Z alu_op [3:0] $end
$var wire 1 [ alu_negative $end
$var wire 32 \ alu_b [31:0] $end
$var parameter 32 ] DMEM_BASE_ADDR $end
$var reg 1 ^ branch_taken $end
$var reg 32 _ branch_target [31:0] $end
$var reg 4 ` dmem_be [3:0] $end
$var reg 32 a imm_out [31:0] $end
$var reg 32 b rd_wdata [31:0] $end
$scope module alu_inst $end
$var wire 32 c a [31:0] $end
$var wire 32 d b [31:0] $end
$var wire 1 < overflow $end
$var wire 1 W zero $end
$var wire 4 e op [3:0] $end
$var wire 1 [ negative $end
$var parameter 4 f ALU_ADD $end
$var parameter 4 g ALU_AND $end
$var parameter 4 h ALU_OR $end
$var parameter 4 i ALU_PASS $end
$var parameter 4 j ALU_SLL $end
$var parameter 4 k ALU_SLT $end
$var parameter 4 l ALU_SLTU $end
$var parameter 4 m ALU_SRA $end
$var parameter 4 n ALU_SRL $end
$var parameter 4 o ALU_SUB $end
$var parameter 4 p ALU_XOR $end
$var reg 1 q add_sub_overflow $end
$var reg 32 r add_sub_result [31:0] $end
$var reg 32 s compare_result [31:0] $end
$var reg 32 t logic_result [31:0] $end
$var reg 32 u result [31:0] $end
$var reg 32 v shift_result [31:0] $end
$upscope $end
$scope module ctrl $end
$var wire 3 w funct3 [2:0] $end
$var wire 7 x funct7 [6:0] $end
$var wire 32 y instruction [31:0] $end
$var wire 7 z opcode [6:0] $end
$var wire 5 { rd [4:0] $end
$var wire 5 | rs1 [4:0] $end
$var wire 5 } rs2 [4:0] $end
$var wire 5 ~ rs2_int [4:0] $end
$var wire 5 !" rs1_int [4:0] $end
$var wire 5 "" rd_int [4:0] $end
$var wire 7 #" opcode_int [6:0] $end
$var wire 7 $" funct7_int [6:0] $end
$var wire 3 %" funct3_int [2:0] $end
$var parameter 4 &" ALU_ADD $end
$var parameter 4 '" ALU_AND $end
$var parameter 4 (" ALU_OR $end
$var parameter 4 )" ALU_PASS $end
$var parameter 4 *" ALU_SLL $end
$var parameter 4 +" ALU_SLT $end
$var parameter 4 ," ALU_SLTU $end
$var parameter 4 -" ALU_SRA $end
$var parameter 4 ." ALU_SRL $end
$var parameter 4 /" ALU_SUB $end
$var parameter 4 0" ALU_XOR $end
$var reg 4 1" alu_op [3:0] $end
$var reg 1 X alu_src $end
$var reg 1 V branch $end
$var reg 1 K jump $end
$var reg 1 = mem_read $end
$var reg 2 2" mem_size [1:0] $end
$var reg 1 I mem_write $end
$var reg 1 D reg_write $end
$var reg 2 3" result_src [1:0] $end
$upscope $end
$scope module immgen $end
$var wire 25 4" instruction [31:7] $end
$var wire 32 5" u_type [31:0] $end
$var wire 32 6" s_type [31:0] $end
$var wire 32 7" j_type [31:0] $end
$var wire 32 8" i_type [31:0] $end
$var wire 32 9" b_type [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ^ branch_taken $end
$var wire 32 :" branch_target [31:0] $end
$var wire 1 # clk $end
$var wire 1 $ rst_n $end
$var wire 1 ; stall $end
$var reg 32 ;" pc_current [31:0] $end
$var reg 32 <" pc_next [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 # clk $end
$var wire 5 =" rd_addr [4:0] $end
$var wire 32 >" rd_data [31:0] $end
$var wire 5 ?" rs1_addr [4:0] $end
$var wire 5 @" rs2_addr [4:0] $end
$var wire 1 $ rst_n $end
$var wire 1 D we $end
$var wire 32 A" rs2_data [31:0] $end
$var wire 32 B" rs1_data [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 C" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 D" addr [31:0] $end
$var wire 4 E" be [3:0] $end
$var wire 1 # clk $end
$var wire 1 $ rst_n $end
$var wire 32 F" wdata [31:0] $end
$var wire 1 ' we $end
$var wire 32 G" local_addr [31:0] $end
$var wire 32 H" base_addr [31:0] $end
$var parameter 32 I" BASE_ADDR $end
$var parameter 32 J" DEPTH $end
$var parameter 8 K" INIT_FILE $end
$var reg 32 L" rdata [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 M" i [31:0] $end
$upscope $end
$upscope $end
$scope module imem $end
$var wire 32 N" addr [31:0] $end
$var wire 1 # clk $end
$var wire 10 O" word_addr [9:0] $end
$var parameter 32 P" DEPTH $end
$var parameter 200 Q" INIT_FILE $end
$var reg 32 R" rdata [31:0] $end
$scope begin $ivl_for_loop2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101110001011100010111101100010011101010110100101101100011001000010111101110100011001010111001101110100010111110111000001110010011011110110011101110010011000010110110100101110011010000110010101111000 Q"
b10000000000 P"
b0 K"
b10000000000 J"
b1000000000000 I"
b100 0"
b1000 /"
b101 ."
b1101 -"
b11 ,"
b10 +"
b1 *"
b1001 )"
b110 ("
b111 '"
b0 &"
b100 p
b1000 o
b101 n
b1101 m
b11 l
b10 k
b1 j
b1001 i
b110 h
b111 g
b0 f
b1000000000000 ]
b101110001011100010111101100010011101010110100101101100011001000010111101110100011001010111001101110100010111110111000001110010011011110110011101110010011000010110110100101110011010000110010101111000 2
b10000000000 1
b0 0
b10000000000 /
$end
#0
$dumpvars
bx R"
b0 O"
b0 N"
b1000000000000 M"
b0 L"
bx00 H"
bx G"
bx F"
b0 E"
bx00 D"
b100000 C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
b100 <"
b0 ;"
b100 :"
bx0 9"
bx 8"
bx0 7"
bx 6"
bx000000000000 5"
bx 4"
b0 3"
b10 2"
b0 1"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
b0x s
bx r
xq
b0 e
bx d
bx c
bx b
b0 a
b0 `
b100 _
0^
bx \
x[
b0 Z
bx Y
0X
xW
0V
bx00 U
bx T
b0 S
bx R
bx Q
bx0 P
bx O
bx0 N
bx M
bx000000000000 L
0K
b10 J
0I
bx H
b0 G
b100 F
bx E
0D
b0 C
bx B
bx A
bx @
bx ?
bx >
0=
x<
0;
bx :
b0 9
bx 8
b10 7
x6
b0 5
bx 4
bx 3
bx .
b0 -
bx00 ,
b0 +
b0 *
b10 )
bx (
0'
b0 &
bx %
0$
0#
bx "
b0 !
$end
#5
b11111111111111111111000000000000 H"
b11111111111111111111000000000000 G"
b0 ,
b0 U
b0 D"
0[
b0 T
06
b1010 b
b1010 >"
0W
b1010 Y
b1010 u
b1 s
0<
0q
b1010 r
b1010 \
b1010 d
b100000000000 P
b100000000000 9"
b1010 N
b1010 7"
b1010 O
b1010 8"
b1 M
b1 6"
b101000000000000000000000 L
b101000000000000000000000 5"
b0 v
b0 t
b1010 a
b0 3
b0 c
b0 A
b0 B"
b0 (
b0 8
b0 F"
b0 ?
b0 A"
1X
1D
b10100000000000001 4"
b10011 H
b10011 z
b10011 #"
b1 E
b1 {
b1 ="
b1 ""
b0 R
b0 w
b0 %"
b0 B
b0 |
b0 ?"
b0 !"
b1010 @
b1010 }
b1010 @"
b1010 ~
b0 >
b0 x
b0 $"
b101000000000000010010011 "
b101000000000000010010011 .
b101000000000000010010011 4
b101000000000000010010011 :
b101000000000000010010011 y
b101000000000000010010011 %
b101000000000000010010011 Q
b101000000000000010010011 R"
b1000000000000 M"
b100000 C"
1#
#10
0#
#15
b1000000000000 M"
b100000 C"
1#
#20
0#
#25
b1000000000000 M"
b100000 C"
1#
#30
0#
#35
b1000000000000 M"
b100000 C"
1#
#40
0#
#45
b1000 <"
b1000 _
b1000 :"
b1 O"
b1000 F
b100 !
b100 -
b100 5
b100 &
b100 9
b100 N"
b100 G
b100 ;"
1$
1#
#50
0#
#55
b10100 b
b10100 >"
b10100 Y
b10100 u
b10100 r
b10100 \
b10100 d
b10 P
b10 9"
b10100 a
b10100 N
b10100 7"
b10100 O
b10100 8"
b10 M
b10 6"
b1010000000000000000000000 L
b1010000000000000000000000 5"
b1100 <"
b1100 _
b1100 :"
b10 O"
b101000000000000010 4"
b10 E
b10 {
b10 ="
b10 ""
b10100 @
b10100 }
b10100 @"
b10100 ~
b1100 F
b1000 !
b1000 -
b1000 5
b1000 &
b1000 9
b1000 N"
b1000 G
b1000 ;"
b1010000000000000100010011 "
b1010000000000000100010011 .
b1010000000000000100010011 4
b1010000000000000100010011 :
b1010000000000000100010011 y
b1010000000000000100010011 %
b1010000000000000100010011 Q
b1010000000000000100010011 R"
1#
#60
0#
#65
b11110 b
b11110 >"
b100000000010 P
b100000000010 9"
b1000000000000010 N
b1000000000000010 7"
b11110 Y
b11110 u
b10 O
b10 8"
b11 M
b11 6"
b1000001000000000000000 L
b1000001000000000000000 5"
b1010 v
b1010 t
b11110 r
b10100 (
b10100 8
b10100 F"
b10100 ?
b10100 A"
b0 a
0X
1D
b1010 3
b1010 c
b1010 A
b1010 B"
b10000 <"
b10000 _
b10000 :"
b11 O"
b100000100000011 4"
b110011 H
b110011 z
b110011 #"
b11 E
b11 {
b11 ="
b11 ""
b1 B
b1 |
b1 ?"
b1 !"
b10 @
b10 }
b10 @"
b10 ~
b10000 F
b1100 !
b1100 -
b1100 5
b1100 &
b1100 9
b1100 N"
b1100 G
b1100 ;"
b1000001000000110110011 "
b1000001000000110110011 .
b1000001000000110110011 4
b1000001000000110110011 :
b1000001000000110110011 y
b1000001000000110110011 %
b1000001000000110110011 Q
b1000001000000110110011 R"
1#
#70
0#
#75
b10000000100 P
b10000000100 9"
b10000110000000000 N
b10000110000000000 7"
b10100 v
b10100 t
b0 s
b1010 \
b1010 d
0[
b1010 b
b1010 >"
b10000000001 O
b10000000001 8"
b10000000100 M
b10000000100 6"
b1000000000100010000000000000000 L
b1000000000100010000000000000000 5"
b10100 3
b10100 c
b10100 A
b10100 B"
b1010 (
b1010 8
b1010 F"
b1010 ?
b1010 A"
b1010 Y
b1010 u
0<
0q
b1010 r
b1000 Z
b1000 e
b1000 1"
1D
b10100 <"
b10100 _
b10100 :"
b100 O"
b100000000010001000000100 4"
b100 E
b100 {
b100 ="
b100 ""
b10 B
b10 |
b10 ?"
b10 !"
b1 @
b1 }
b1 @"
b1 ~
b100000 >
b100000 x
b100000 $"
b10100 F
b10000 !
b10000 -
b10000 5
b10000 &
b10000 9
b10000 N"
b10000 G
b10000 ;"
b1000000000100010000001000110011 "
b1000000000100010000001000110011 .
b1000000000100010000001000110011 4
b1000000000100010000001000110011 :
b1000000000100010000001000110011 y
b1000000000100010000001000110011 %
b1000000000100010000001000110011 Q
b1000000000100010000001000110011 R"
1#
#80
0#
#85
1W
b0 b
b0 >"
b0 Y
b0 u
b0 P
b0 9"
b10100000000010 N
b10100000000010 7"
b0 r
b11 O
b11 8"
b0 M
b0 6"
b1100000010000000000000 L
b1100000010000000000000 5"
b11110 (
b11110 8
b11110 F"
b11110 ?
b11110 A"
b0 \
b0 d
b0 v
b0 t
b0 s
b0 a
b0 3
b0 c
b0 A
b0 B"
1I
1X
b0 Z
b0 e
b0 1"
0D
b11000 <"
b11000 _
b11000 :"
b101 O"
b110000001000000 4"
b100011 H
b100011 z
b100011 #"
b0 E
b0 {
b0 ="
b0 ""
b10 R
b10 w
b10 %"
b0 B
b0 |
b0 ?"
b0 !"
b11 @
b11 }
b11 @"
b11 ~
b0 >
b0 x
b0 $"
b11000 F
b10100 !
b10100 -
b10100 5
b10100 &
b10100 9
b10100 N"
b10100 G
b10100 ;"
b1100000010000000100011 "
b1100000010000000100011 .
b1100000010000000100011 4
b1100000010000000100011 :
b1100000010000000100011 y
b1100000010000000100011 %
b1100000010000000100011 Q
b1100000010000000100011 R"
1#
#90
0#
#95
1W
b0 Y
b0 u
b100000000100 P
b100000000100 9"
b10000000000000 N
b10000000000000 7"
b0 s
b0 r
b0 O
b0 8"
b101 M
b101 6"
b10000000000000 L
b10000000000000 5"
b0 \
b0 d
b0 a
b1 C
b1 3"
1=
1D
0I
1X
b0 (
b0 8
b0 F"
b0 ?
b0 A"
b11100 <"
b11100 _
b11100 :"
b110 O"
b1000101 4"
b11 H
b11 z
b11 #"
b101 E
b101 {
b101 ="
b101 ""
b0 @
b0 }
b0 @"
b0 ~
b11100 F
b11000 !
b11000 -
b11000 5
b11000 &
b11000 9
b11000 N"
b11000 G
b11000 ;"
b10001010000011 "
b10001010000011 .
b10001010000011 4
b10001010000011 :
b10001010000011 y
b10001010000011 %
b10001010000011 Q
b10001010000011 R"
1#
#100
0#
#105
b1000 P
b1000 9"
b11000100000000100 N
b11000100000000100 7"
b11110 b
b11110 >"
b101 O
b101 8"
b1000 M
b1000 6"
b10100011000000000000000 L
b10100011000000000000000 5"
0W
b11110 Y
b11110 u
0^
b11110 v
b11110 t
b11110 r
b1000 a
b1000 Z
b1000 e
b1000 1"
1V
b0 C
b0 3"
0=
0X
0D
b11110 3
b11110 c
b11110 A
b11110 B"
b100000 <"
b100100 _
b100100 :"
b111 O"
b1010001100001000 4"
b1100011 H
b1100011 z
b1100011 #"
b1000 E
b1000 {
b1000 ="
b1000 ""
b0 R
b0 w
b0 %"
b11 B
b11 |
b11 ?"
b11 !"
b101 @
b101 }
b101 @"
b101 ~
b100000 F
b11100 !
b11100 -
b11100 5
b11100 &
b11100 9
b11100 N"
b11100 G
b11100 ;"
b10100011000010001100011 "
b10100011000010001100011 .
b10100011000010001100011 4
b10100011000010001100011 :
b10100011000010001100011 y
b10100011000010001100011 %
b10100011000010001100011 Q
b10100011000010001100011 R"
1#
#110
0#
#115
b0 P
b0 9"
b1100 N
b1100 7"
b1100 O
b1100 8"
b0 M
b0 6"
b110000000000000000000000 L
b110000000000000000000000 5"
b100100 b
b100100 >"
1^
1W
b0 Y
b0 u
b0 v
b0 t
b0 r
b1100 a
b10 C
b10 3"
1K
1D
0V
b0 Z
b0 e
b0 1"
b0 3
b0 c
b0 A
b0 B"
b101100 <"
b101100 _
b101100 :"
b1000 O"
b11000000000000000 4"
b1101111 H
b1101111 z
b1101111 #"
b0 E
b0 {
b0 ="
b0 ""
b0 B
b0 |
b0 ?"
b0 !"
b1100 @
b1100 }
b1100 @"
b1100 ~
b100100 F
b100000 !
b100000 -
b100000 5
b100000 &
b100000 9
b100000 N"
b100000 G
b100000 ;"
b110000000000000001101111 "
b110000000000000001101111 .
b110000000000000001101111 4
b110000000000000001101111 :
b110000000000000001101111 y
b110000000000000001101111 %
b110000000000000001101111 Q
b110000000000000001101111 R"
1#
#120
0#
#125
1W
b0 Y
b0 u
b0 a
b0 N
b0 7"
b0 s
b0 r
b0 O
b0 8"
b0 L
b0 5"
b0 \
b0 d
0^
1X
b0 C
b0 3"
0K
1D
b110000 <"
b0 b
b0 >"
b110000 _
b110000 :"
b1011 O"
b0 4"
b10011 H
b10011 z
b10011 #"
b0 @
b0 }
b0 @"
b0 ~
b110000 F
b101100 !
b101100 -
b101100 5
b101100 &
b101100 9
b101100 N"
b101100 G
b101100 ;"
b10011 "
b10011 .
b10011 4
b10011 :
b10011 y
b10011 %
b10011 Q
b10011 R"
1#
#130
0#
#135
b11111111111111111111011111100000 P
b11111111111111111111011111100000 9"
b11111111111111111111111111111100 a
b11111111111111111111111111111100 N
b11111111111111111111111111111100 7"
b11111111111111111111111111111101 O
b11111111111111111111111111111101 8"
b11111111111111111111111111100000 M
b11111111111111111111111111100000 6"
b11111111110111111111000000000000 L
b11111111110111111111000000000000 5"
b110100 b
b110100 >"
1^
b10 C
b10 3"
1K
0X
1D
b101100 <"
b101100 _
b101100 :"
b1100 O"
b1111111111011111111100000 4"
b1101111 H
b1101111 z
b1101111 #"
b111 R
b111 w
b111 %"
b11111 B
b11111 |
b11111 ?"
b11111 !"
b11101 @
b11101 }
b11101 @"
b11101 ~
b1111111 >
b1111111 x
b1111111 $"
b110100 F
b110000 !
b110000 -
b110000 5
b110000 &
b110000 9
b110000 N"
b110000 G
b110000 ;"
b11111111110111111111000001101111 "
b11111111110111111111000001101111 .
b11111111110111111111000001101111 4
b11111111110111111111000001101111 :
b11111111110111111111000001101111 y
b11111111110111111111000001101111 %
b11111111110111111111000001101111 Q
b11111111110111111111000001101111 R"
1#
